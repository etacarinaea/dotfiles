snippet bega "Article" bA
\documentclass{article}
	\usepackage[paper=a4paper,margin=1in]{geometry}
	\title{$1}
	\date{$2}

\begin{document}
\maketitle

$0

\end{document}
endsnippet

snippet begem "Math exercise sheet" bA
\documentclass[fleqn]{article}
	\usepackage[paper=a4paper,margin=1in]{geometry}
	\usepackage{enumitem}
	\usepackage{listings}
	\usepackage{amsmath}
	\usepackage{amsthm}
	\usepackage{amssymb}
	%\usepackage{mathtools}
	%\usepackage{tikz}
	\title{\vspace{-4ex}$1 --- $2}
	\date{$3}

	\renewcommand{\thesection}{Aufgabe \arabic{section}}
	\newcolumntype{Y}{>{\centering\arraybackslash}X}

\begin{document}
\maketitle
\noindent
\begin{minipage}[c]{0.5\textwidth}
	\begin{tabular}{@{}ll}
		Name:& $4\\
		Tutor:& $5\\
		Gruppe:& $6
	\end{tabular}
\end{minipage}
\begin{minipage}[c]{0.5\textwidth}
	\renewcommand{\arraystretch}{2}
	\begin{tabularx}{\textwidth}{YYYYYY||Y}
		1 & 2 & 3 & 4 & 5 & 6 & $\Sigma$\\\hline
		  &   &   &   &   &   &
	\end{tabularx}
\end{minipage}
\vspace{1em}

\section*{$7}
\begin{enumerate}[label=\alph*)]
	\item $0
\end{enumerate}

\end{document}
endsnippet


snippet dm "Math" wA
\[
	$1
\]$0
endsnippet


snippet inna "in Natural" wA
\in \mathbb{N}
endsnippet
snippet inz "in Integers" wA
\in \mathbb{Z}
endsnippet
snippet inq "in Rational" wA
\in \mathbb{Q}
endsnippet
snippet inr "in Real" wA
\in \mathbb{R}
endsnippet
snippet incx "in Complex" wA
\in \mathbb{C}
endsnippet

snippet ... "Ellipsis" iA
\ldots
endsnippet

snippet '([A-Za-z(){}])_([^{}][^\^_\s{},])' "auto subscript" rA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}$0
endsnippet

snippet '([A-Za-z(){}])\^([^{}][^\^_\s{},])' "auto superscript" rA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$1}$0
endsnippet

snippet sum "Sum" i
\\sum_{${1:i} = ${2:1}}^{${3:\\infty}}$0
endsnippet

snippet frac "Fraction" i
\\frac{$1}{$2}$0
endsnippet


snippet '([A-Za-z])(\.,)' "Vector" riA
\textrm{\pmb{`!p snip.rv=match.group(1)`}}$0
endsnippet

global !p
def matrix(snip):
	# Generates a [pvb]matrix of size mxn. If id is specified, an indetity matrix
	# is generated. If -\d is speicifed then the matrix is broken up by dots
	currentLine = re.match(r'([pvVbB])?(id)?mat(rix)?(\d+)x(\d+)(-(\d))?', snip.buffer[snip.line].strip())
	t = currentLine.group(1) if currentLine.group(1) is not None else ""
	isIdMat = True if currentLine.group(2) is not None else False
	brkPoint = int(currentLine.group(7)) if currentLine.group(7) is not None else False
	m = int(currentLine.group(4))
	n = int(currentLine.group(5))
	snip.buffer[snip.line] = ""
	result = "\\begin{" + t + "matrix}\n"
	for i in range(m):
		row = ""
		for j in range(n):
			if isIdMat:
				if i == j:
					row += "${" + str(i+1)
					if brkPoint and i == (m - brkPoint):
						row += ":\\ddots}"
					else:
						row += ":1}"
				else:
					row += " "
			elif brkPoint:
				row += "${" + str((j+1)+i*n)
				if j == (n - brkPoint):
					if i == (m - brkPoint):
						row += ":\\ddots}"
					else:
						row += ":\\cdots}"
				elif i == (m - brkPoint):
					row += ":\\vdots}"
				else:
					row += "}"
			else:
				row += "$" + str((j+1)+i*n)
			if ((j+1) % n) == 0 :
				if (i+1) == m:
					row += "\n"
				else:
					row += " \\\\\\\\\n"
			else:
				row += " & "
		result += row
	result += "\\end{" + t + "matrix}$0"
	snip.expand_anon(result)
endglobal
pre_expand "matrix(snip)"
snippet "([pvVbB])?(id)?mat(rix)?(\d+)x(\d+)(-(\d))?" "Generate matrix" br
endsnippet


snippet pp( "Parentheses" i
\left($1\right)$0
endsnippet
snippet pc{ "Curly parentheses" i
\left\{$1\right\}$0
endsnippet
snippet langle "Angle brackets" i
\langle $1 \rangle$0
endsnippet

snippet => "Implication" iA
\implies
endsnippet
snippet =<> "Equivalence" iA
\iff
endsnippet

snippet != "not equal" iA
\neq
endsnippet
snippet >= "greater than or equal" iA
\geq
endsnippet
snippet <= "less than or equal" iA
\leq
endsnippet

snippet norm "Norm" i
\left\lVert $1 \right\rVert$0
endsnippet
snippet abs "Absolute value function" i
\left\lvert $1 \right\rvert$0
endsnippet

snippet innerp "Inner product" iA
\langle $1, $2 \rangle$0
endsnippet

snippet argdot "Operator argument dot" iA
\,\cdot\,
endsnippet

snippet integral "Integral" i
\int $2 \ d${1:x}$0
endsnippet
