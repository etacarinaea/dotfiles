#!/bin/bash
#
# Creates symbolic links for dotfiles.

# List of files and directories to ignore, including this script.
# This will not delete existing symlinks!
ignore=(
${0##*/}
*.git/*
*.swp*
)

USAGE="Usage: $(basename "$0") [options]

Options:
  -h   Show usage
  -l   List all files exluding ignored ones
  -n   Never use ln -sf, don't even ask
  -f   Use ln -sf for all matches
  -o   Hide errors

If -n or -f are omitted you will be asked whether or not to use
force (deleting the file at the destination) for creating a symlink,
if a file at the destination already exists.
"


list=false
nosf=false
lnopt="s"
lnsuf=""
stderrdir=""

while getopts "hlnfo" opt; do
    case $opt in
        h)
            echo "$USAGE"
            exit
            ;;
        l)
            list=true
            ;;
        n)
            nosf=true
            ;;
        f)    
            lnopt="sf" 
            ;;
        o)
            stderrdir=/dev/null
            ;;
        \?)
            echo "$USAGE"
            exit
            ;;
    esac
done


cd ~/dotfiles/
files=$(find $PWD -type f)

for file in $files; do
    dir=${file%/*}
    dir=${dir#*$PWD}
    dir=${dir#*/}

    for ex in ${ignore[@]}; do
        [[ ${file#*$PWD/} == $ex ]] && ig=true && break || ig=false 
    done

    [[ $ig == true ]] && continue

    [[ $list == true ]] && echo "$file" && continue

    file=${file##*/}
    if [[ $dir == "" ]]; then
        path=$HOME/$file
    else
        dir=$dir/
        path=$HOME/$dir$file
    fi

    # create folders in case they don't exist
    mkdir --parents $HOME/$dir

    echo "Creating Symlink to $dir$file at $path"

    if [[ $stderrdir == "" ]]; then
        ln -$lnopt "$PWD/$dir$file" "$path"
    else
        ln -$lnopt "$PWD/$dir$file" "$path" 2>$stderrdir
    fi

    # just to be safe
    if [[ $? > "0"  ]] && [[ ! $lnopt == "sf" ]] && [[ ! $nosf == "true" ]]; then
        echo "Failed!"
        read -p "Use force? [Y/N]: " uforce
        case $uforce in
            [Yy]* ) ln -sf "$PWD/$dir$file" "$path" && echo Done;;
            [Nn]* | * ) echo "Skipping.." && continue;;
        esac
    fi
done
